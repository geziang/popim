// Code generated by protoc-gen-go. DO NOT EDIT.
// source: popim.proto

package popim

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PushMsg_PushMsgType int32

const (
	PushMsg_IMMSG        PushMsg_PushMsgType = 0
	PushMsg_NEWFRIENDMSG PushMsg_PushMsgType = 1
	PushMsg_REQFRIENDMSG PushMsg_PushMsgType = 2
)

var PushMsg_PushMsgType_name = map[int32]string{
	0: "IMMSG",
	1: "NEWFRIENDMSG",
	2: "REQFRIENDMSG",
}

var PushMsg_PushMsgType_value = map[string]int32{
	"IMMSG":        0,
	"NEWFRIENDMSG": 1,
	"REQFRIENDMSG": 2,
}

func (x PushMsg_PushMsgType) String() string {
	return proto.EnumName(PushMsg_PushMsgType_name, int32(x))
}

func (PushMsg_PushMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{14, 0}
}

type OperationResult struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationResult) Reset()         { *m = OperationResult{} }
func (m *OperationResult) String() string { return proto.CompactTextString(m) }
func (*OperationResult) ProtoMessage()    {}
func (*OperationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{0}
}

func (m *OperationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationResult.Unmarshal(m, b)
}
func (m *OperationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationResult.Marshal(b, m, deterministic)
}
func (m *OperationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResult.Merge(m, src)
}
func (m *OperationResult) XXX_Size() int {
	return xxx_messageInfo_OperationResult.Size(m)
}
func (m *OperationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResult.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResult proto.InternalMessageInfo

func (m *OperationResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OperationResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//注册请求
type RegisterReq struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReq) Reset()         { *m = RegisterReq{} }
func (m *RegisterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()    {}
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{1}
}

func (m *RegisterReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterReq.Unmarshal(m, b)
}
func (m *RegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterReq.Marshal(b, m, deterministic)
}
func (m *RegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReq.Merge(m, src)
}
func (m *RegisterReq) XXX_Size() int {
	return xxx_messageInfo_RegisterReq.Size(m)
}
func (m *RegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReq proto.InternalMessageInfo

func (m *RegisterReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *RegisterReq) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

//注册响应
type RegisterRes struct {
	Result               *OperationResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	PopId                uint64           `protobuf:"varint,2,opt,name=popId,proto3" json:"popId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RegisterRes) Reset()         { *m = RegisterRes{} }
func (m *RegisterRes) String() string { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()    {}
func (*RegisterRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{2}
}

func (m *RegisterRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRes.Unmarshal(m, b)
}
func (m *RegisterRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRes.Marshal(b, m, deterministic)
}
func (m *RegisterRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRes.Merge(m, src)
}
func (m *RegisterRes) XXX_Size() int {
	return xxx_messageInfo_RegisterRes.Size(m)
}
func (m *RegisterRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRes.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRes proto.InternalMessageInfo

func (m *RegisterRes) GetResult() *OperationResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RegisterRes) GetPopId() uint64 {
	if m != nil {
		return m.PopId
	}
	return 0
}

//登录请求 凭据id和手机号任选其一，id优先
type LoginReq struct {
	PopId                uint64   `protobuf:"varint,1,opt,name=popId,proto3" json:"popId,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,2,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{3}
}

func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginReq.Unmarshal(m, b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return xxx_messageInfo_LoginReq.Size(m)
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetPopId() uint64 {
	if m != nil {
		return m.PopId
	}
	return 0
}

func (m *LoginReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

//登录响应
type LoginRes struct {
	Result               *OperationResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Context              *AuthContext     `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LoginRes) Reset()         { *m = LoginRes{} }
func (m *LoginRes) String() string { return proto.CompactTextString(m) }
func (*LoginRes) ProtoMessage()    {}
func (*LoginRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{4}
}

func (m *LoginRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRes.Unmarshal(m, b)
}
func (m *LoginRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRes.Marshal(b, m, deterministic)
}
func (m *LoginRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRes.Merge(m, src)
}
func (m *LoginRes) XXX_Size() int {
	return xxx_messageInfo_LoginRes.Size(m)
}
func (m *LoginRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRes.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRes proto.InternalMessageInfo

func (m *LoginRes) GetResult() *OperationResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *LoginRes) GetContext() *AuthContext {
	if m != nil {
		return m.Context
	}
	return nil
}

//认证上下文，一次登录后保持一段时间并作为后续请求的凭证
type AuthContext struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PopId                uint64   `protobuf:"varint,2,opt,name=popId,proto3" json:"popId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthContext) Reset()         { *m = AuthContext{} }
func (m *AuthContext) String() string { return proto.CompactTextString(m) }
func (*AuthContext) ProtoMessage()    {}
func (*AuthContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{5}
}

func (m *AuthContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthContext.Unmarshal(m, b)
}
func (m *AuthContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthContext.Marshal(b, m, deterministic)
}
func (m *AuthContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthContext.Merge(m, src)
}
func (m *AuthContext) XXX_Size() int {
	return xxx_messageInfo_AuthContext.Size(m)
}
func (m *AuthContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthContext.DiscardUnknown(m)
}

var xxx_messageInfo_AuthContext proto.InternalMessageInfo

func (m *AuthContext) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthContext) GetPopId() uint64 {
	if m != nil {
		return m.PopId
	}
	return 0
}

//针对POP id的查询请求
type QueryByIdReq struct {
	Context              *AuthContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	QueryPopId           uint64       `protobuf:"varint,2,opt,name=queryPopId,proto3" json:"queryPopId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *QueryByIdReq) Reset()         { *m = QueryByIdReq{} }
func (m *QueryByIdReq) String() string { return proto.CompactTextString(m) }
func (*QueryByIdReq) ProtoMessage()    {}
func (*QueryByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{6}
}

func (m *QueryByIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryByIdReq.Unmarshal(m, b)
}
func (m *QueryByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryByIdReq.Marshal(b, m, deterministic)
}
func (m *QueryByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryByIdReq.Merge(m, src)
}
func (m *QueryByIdReq) XXX_Size() int {
	return xxx_messageInfo_QueryByIdReq.Size(m)
}
func (m *QueryByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryByIdReq proto.InternalMessageInfo

func (m *QueryByIdReq) GetContext() *AuthContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *QueryByIdReq) GetQueryPopId() uint64 {
	if m != nil {
		return m.QueryPopId
	}
	return 0
}

//更新用户信息请求
type UpdateUserInfoReq struct {
	Context              *AuthContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Data                 *UserInfo    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateUserInfoReq) Reset()         { *m = UpdateUserInfoReq{} }
func (m *UpdateUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserInfoReq) ProtoMessage()    {}
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{7}
}

func (m *UpdateUserInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateUserInfoReq.Unmarshal(m, b)
}
func (m *UpdateUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateUserInfoReq.Marshal(b, m, deterministic)
}
func (m *UpdateUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserInfoReq.Merge(m, src)
}
func (m *UpdateUserInfoReq) XXX_Size() int {
	return xxx_messageInfo_UpdateUserInfoReq.Size(m)
}
func (m *UpdateUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserInfoReq proto.InternalMessageInfo

func (m *UpdateUserInfoReq) GetContext() *AuthContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *UpdateUserInfoReq) GetData() *UserInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

//查询用户信息响应
type UserInfoRes struct {
	Result               *OperationResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Data                 *UserInfo        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserInfoRes) Reset()         { *m = UserInfoRes{} }
func (m *UserInfoRes) String() string { return proto.CompactTextString(m) }
func (*UserInfoRes) ProtoMessage()    {}
func (*UserInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{8}
}

func (m *UserInfoRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfoRes.Unmarshal(m, b)
}
func (m *UserInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfoRes.Marshal(b, m, deterministic)
}
func (m *UserInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoRes.Merge(m, src)
}
func (m *UserInfoRes) XXX_Size() int {
	return xxx_messageInfo_UserInfoRes.Size(m)
}
func (m *UserInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoRes proto.InternalMessageInfo

func (m *UserInfoRes) GetResult() *OperationResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *UserInfoRes) GetData() *UserInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

//用户信息
type UserInfo struct {
	PopId                uint64   `protobuf:"varint,1,opt,name=popId,proto3" json:"popId,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	MusicId              uint64   `protobuf:"varint,3,opt,name=musicId,proto3" json:"musicId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{9}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetPopId() uint64 {
	if m != nil {
		return m.PopId
	}
	return 0
}

func (m *UserInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UserInfo) GetMusicId() uint64 {
	if m != nil {
		return m.MusicId
	}
	return 0
}

//流式下载文件块
type StreamDownloadFileBlock struct {
	TotalCount           uint64   `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamDownloadFileBlock) Reset()         { *m = StreamDownloadFileBlock{} }
func (m *StreamDownloadFileBlock) String() string { return proto.CompactTextString(m) }
func (*StreamDownloadFileBlock) ProtoMessage()    {}
func (*StreamDownloadFileBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{10}
}

func (m *StreamDownloadFileBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamDownloadFileBlock.Unmarshal(m, b)
}
func (m *StreamDownloadFileBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamDownloadFileBlock.Marshal(b, m, deterministic)
}
func (m *StreamDownloadFileBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDownloadFileBlock.Merge(m, src)
}
func (m *StreamDownloadFileBlock) XXX_Size() int {
	return xxx_messageInfo_StreamDownloadFileBlock.Size(m)
}
func (m *StreamDownloadFileBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDownloadFileBlock.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDownloadFileBlock proto.InternalMessageInfo

func (m *StreamDownloadFileBlock) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *StreamDownloadFileBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//流式上传文件块
type StreamUploadFileBlock struct {
	Context              *AuthContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TotalCount           uint64       `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Data                 []byte       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StreamUploadFileBlock) Reset()         { *m = StreamUploadFileBlock{} }
func (m *StreamUploadFileBlock) String() string { return proto.CompactTextString(m) }
func (*StreamUploadFileBlock) ProtoMessage()    {}
func (*StreamUploadFileBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{11}
}

func (m *StreamUploadFileBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamUploadFileBlock.Unmarshal(m, b)
}
func (m *StreamUploadFileBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamUploadFileBlock.Marshal(b, m, deterministic)
}
func (m *StreamUploadFileBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamUploadFileBlock.Merge(m, src)
}
func (m *StreamUploadFileBlock) XXX_Size() int {
	return xxx_messageInfo_StreamUploadFileBlock.Size(m)
}
func (m *StreamUploadFileBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamUploadFileBlock.DiscardUnknown(m)
}

var xxx_messageInfo_StreamUploadFileBlock proto.InternalMessageInfo

func (m *StreamUploadFileBlock) GetContext() *AuthContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *StreamUploadFileBlock) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *StreamUploadFileBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SearchFriendReq struct {
	Context              *AuthContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Keyword              string       `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchFriendReq) Reset()         { *m = SearchFriendReq{} }
func (m *SearchFriendReq) String() string { return proto.CompactTextString(m) }
func (*SearchFriendReq) ProtoMessage()    {}
func (*SearchFriendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{12}
}

func (m *SearchFriendReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchFriendReq.Unmarshal(m, b)
}
func (m *SearchFriendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchFriendReq.Marshal(b, m, deterministic)
}
func (m *SearchFriendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchFriendReq.Merge(m, src)
}
func (m *SearchFriendReq) XXX_Size() int {
	return xxx_messageInfo_SearchFriendReq.Size(m)
}
func (m *SearchFriendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchFriendReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchFriendReq proto.InternalMessageInfo

func (m *SearchFriendReq) GetContext() *AuthContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SearchFriendReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

//好友列表，可以流式传输也可以一次性发送
type FriendList struct {
	TotalCount           uint64      `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	UserInfo             []*UserInfo `protobuf:"bytes,2,rep,name=userInfo,proto3" json:"userInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FriendList) Reset()         { *m = FriendList{} }
func (m *FriendList) String() string { return proto.CompactTextString(m) }
func (*FriendList) ProtoMessage()    {}
func (*FriendList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{13}
}

func (m *FriendList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendList.Unmarshal(m, b)
}
func (m *FriendList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendList.Marshal(b, m, deterministic)
}
func (m *FriendList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendList.Merge(m, src)
}
func (m *FriendList) XXX_Size() int {
	return xxx_messageInfo_FriendList.Size(m)
}
func (m *FriendList) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendList.DiscardUnknown(m)
}

var xxx_messageInfo_FriendList proto.InternalMessageInfo

func (m *FriendList) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *FriendList) GetUserInfo() []*UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

//推送消息
type PushMsg struct {
	Timestamp            uint64              `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type                 PushMsg_PushMsgType `protobuf:"varint,2,opt,name=type,proto3,enum=popim.PushMsg_PushMsgType" json:"type,omitempty"`
	ImMsgData            *IMMsgs             `protobuf:"bytes,3,opt,name=imMsgData,proto3" json:"imMsgData,omitempty"`
	FriendMsgData        *UserInfo           `protobuf:"bytes,4,opt,name=friendMsgData,proto3" json:"friendMsgData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PushMsg) Reset()         { *m = PushMsg{} }
func (m *PushMsg) String() string { return proto.CompactTextString(m) }
func (*PushMsg) ProtoMessage()    {}
func (*PushMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{14}
}

func (m *PushMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushMsg.Unmarshal(m, b)
}
func (m *PushMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushMsg.Marshal(b, m, deterministic)
}
func (m *PushMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMsg.Merge(m, src)
}
func (m *PushMsg) XXX_Size() int {
	return xxx_messageInfo_PushMsg.Size(m)
}
func (m *PushMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PushMsg proto.InternalMessageInfo

func (m *PushMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PushMsg) GetType() PushMsg_PushMsgType {
	if m != nil {
		return m.Type
	}
	return PushMsg_IMMSG
}

func (m *PushMsg) GetImMsgData() *IMMsgs {
	if m != nil {
		return m.ImMsgData
	}
	return nil
}

func (m *PushMsg) GetFriendMsgData() *UserInfo {
	if m != nil {
		return m.FriendMsgData
	}
	return nil
}

type IMMsg struct {
	Timestamp            uint64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FromId               uint64   `protobuf:"varint,2,opt,name=fromId,proto3" json:"fromId,omitempty"`
	ToId                 uint64   `protobuf:"varint,3,opt,name=toId,proto3" json:"toId,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMMsg) Reset()         { *m = IMMsg{} }
func (m *IMMsg) String() string { return proto.CompactTextString(m) }
func (*IMMsg) ProtoMessage()    {}
func (*IMMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{15}
}

func (m *IMMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IMMsg.Unmarshal(m, b)
}
func (m *IMMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IMMsg.Marshal(b, m, deterministic)
}
func (m *IMMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMMsg.Merge(m, src)
}
func (m *IMMsg) XXX_Size() int {
	return xxx_messageInfo_IMMsg.Size(m)
}
func (m *IMMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_IMMsg.DiscardUnknown(m)
}

var xxx_messageInfo_IMMsg proto.InternalMessageInfo

func (m *IMMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *IMMsg) GetFromId() uint64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *IMMsg) GetToId() uint64 {
	if m != nil {
		return m.ToId
	}
	return 0
}

func (m *IMMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type SendIMMsgReq struct {
	Context              *AuthContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	ImMsg                *IMMsg       `protobuf:"bytes,2,opt,name=imMsg,proto3" json:"imMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendIMMsgReq) Reset()         { *m = SendIMMsgReq{} }
func (m *SendIMMsgReq) String() string { return proto.CompactTextString(m) }
func (*SendIMMsgReq) ProtoMessage()    {}
func (*SendIMMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{16}
}

func (m *SendIMMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendIMMsgReq.Unmarshal(m, b)
}
func (m *SendIMMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendIMMsgReq.Marshal(b, m, deterministic)
}
func (m *SendIMMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendIMMsgReq.Merge(m, src)
}
func (m *SendIMMsgReq) XXX_Size() int {
	return xxx_messageInfo_SendIMMsgReq.Size(m)
}
func (m *SendIMMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendIMMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendIMMsgReq proto.InternalMessageInfo

func (m *SendIMMsgReq) GetContext() *AuthContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SendIMMsgReq) GetImMsg() *IMMsg {
	if m != nil {
		return m.ImMsg
	}
	return nil
}

type IMMsgs struct {
	TotalCount           uint64   `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	ImMsg                []*IMMsg `protobuf:"bytes,2,rep,name=imMsg,proto3" json:"imMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IMMsgs) Reset()         { *m = IMMsgs{} }
func (m *IMMsgs) String() string { return proto.CompactTextString(m) }
func (*IMMsgs) ProtoMessage()    {}
func (*IMMsgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4aa026da097ca58, []int{17}
}

func (m *IMMsgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IMMsgs.Unmarshal(m, b)
}
func (m *IMMsgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IMMsgs.Marshal(b, m, deterministic)
}
func (m *IMMsgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IMMsgs.Merge(m, src)
}
func (m *IMMsgs) XXX_Size() int {
	return xxx_messageInfo_IMMsgs.Size(m)
}
func (m *IMMsgs) XXX_DiscardUnknown() {
	xxx_messageInfo_IMMsgs.DiscardUnknown(m)
}

var xxx_messageInfo_IMMsgs proto.InternalMessageInfo

func (m *IMMsgs) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *IMMsgs) GetImMsg() []*IMMsg {
	if m != nil {
		return m.ImMsg
	}
	return nil
}

func init() {
	proto.RegisterEnum("popim.PushMsg_PushMsgType", PushMsg_PushMsgType_name, PushMsg_PushMsgType_value)
	proto.RegisterType((*OperationResult)(nil), "popim.OperationResult")
	proto.RegisterType((*RegisterReq)(nil), "popim.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "popim.RegisterRes")
	proto.RegisterType((*LoginReq)(nil), "popim.LoginReq")
	proto.RegisterType((*LoginRes)(nil), "popim.LoginRes")
	proto.RegisterType((*AuthContext)(nil), "popim.AuthContext")
	proto.RegisterType((*QueryByIdReq)(nil), "popim.QueryByIdReq")
	proto.RegisterType((*UpdateUserInfoReq)(nil), "popim.UpdateUserInfoReq")
	proto.RegisterType((*UserInfoRes)(nil), "popim.UserInfoRes")
	proto.RegisterType((*UserInfo)(nil), "popim.UserInfo")
	proto.RegisterType((*StreamDownloadFileBlock)(nil), "popim.StreamDownloadFileBlock")
	proto.RegisterType((*StreamUploadFileBlock)(nil), "popim.StreamUploadFileBlock")
	proto.RegisterType((*SearchFriendReq)(nil), "popim.SearchFriendReq")
	proto.RegisterType((*FriendList)(nil), "popim.FriendList")
	proto.RegisterType((*PushMsg)(nil), "popim.PushMsg")
	proto.RegisterType((*IMMsg)(nil), "popim.IMMsg")
	proto.RegisterType((*SendIMMsgReq)(nil), "popim.SendIMMsgReq")
	proto.RegisterType((*IMMsgs)(nil), "popim.IMMsgs")
}

func init() { proto.RegisterFile("popim.proto", fileDescriptor_b4aa026da097ca58) }

var fileDescriptor_b4aa026da097ca58 = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5b, 0x6f, 0xe2, 0x46,
	0x14, 0xc6, 0xdc, 0x7d, 0x4c, 0x2e, 0x3b, 0x6d, 0xb7, 0x08, 0xad, 0x56, 0x68, 0xfa, 0x12, 0x29,
	0x15, 0x8a, 0x68, 0xab, 0xde, 0x1f, 0xc2, 0x92, 0x50, 0xb7, 0x81, 0xee, 0x9a, 0xa6, 0x55, 0xa4,
	0x3e, 0xd4, 0xc1, 0x03, 0x58, 0x60, 0x8f, 0x63, 0x8f, 0x9b, 0xf2, 0xe7, 0xaa, 0xfe, 0xad, 0xaa,
	0x2f, 0xd5, 0x8c, 0xc7, 0x66, 0x20, 0x38, 0x94, 0x3e, 0xe1, 0x73, 0x7c, 0xce, 0xf7, 0x9d, 0xbb,
	0x01, 0x23, 0xa0, 0x81, 0xeb, 0x75, 0x82, 0x90, 0x32, 0x8a, 0x2a, 0x42, 0xc0, 0x9f, 0xc3, 0xc9,
	0x8f, 0x01, 0x09, 0x6d, 0xe6, 0x52, 0xdf, 0x22, 0x51, 0xbc, 0x64, 0x08, 0x41, 0x79, 0x42, 0x1d,
	0xd2, 0xd4, 0xda, 0xda, 0x59, 0xc5, 0x12, 0xcf, 0xe8, 0x14, 0x4a, 0x5e, 0x34, 0x6b, 0x16, 0xdb,
	0xda, 0x99, 0x6e, 0xf1, 0x47, 0xfc, 0x03, 0x18, 0x16, 0x99, 0xb9, 0x11, 0x23, 0xa1, 0x45, 0x1e,
	0x50, 0x1b, 0x8c, 0x60, 0x4e, 0x7d, 0x32, 0x8a, 0xbd, 0x7b, 0x12, 0x0a, 0x5f, 0xdd, 0x52, 0x55,
	0xa8, 0x05, 0x75, 0xdf, 0x9d, 0x2c, 0x46, 0xb6, 0x47, 0x24, 0x4e, 0x26, 0xe3, 0xb1, 0x0a, 0x16,
	0xa1, 0x0e, 0x54, 0x43, 0x11, 0x8b, 0xc0, 0x31, 0xba, 0x2f, 0x3b, 0x49, 0xe4, 0x5b, 0x91, 0x5a,
	0xd2, 0x0a, 0xbd, 0x0f, 0x3c, 0x1b, 0xd3, 0x11, 0xb8, 0x65, 0x2b, 0x11, 0x70, 0x0f, 0xea, 0x37,
	0x74, 0xe6, 0xfa, 0x3c, 0xbc, 0xcc, 0x42, 0x53, 0x2c, 0xb6, 0x83, 0x2e, 0x3e, 0x09, 0x1a, 0xcf,
	0x33, 0x8c, 0xc3, 0xa3, 0xfa, 0x18, 0x6a, 0x13, 0xea, 0x33, 0xf2, 0x07, 0x13, 0xc8, 0x46, 0x17,
	0x49, 0x87, 0xcb, 0x98, 0xcd, 0xdf, 0x24, 0x6f, 0xac, 0xd4, 0x04, 0x7f, 0x09, 0x86, 0xa2, 0xe7,
	0x01, 0x33, 0xba, 0x20, 0xbe, 0xac, 0x64, 0x22, 0xe4, 0x24, 0xfa, 0x2b, 0x34, 0xde, 0xc5, 0x24,
	0x5c, 0xf5, 0x56, 0xa6, 0xc3, 0x93, 0x55, 0x88, 0xb5, 0xbd, 0xc4, 0xe8, 0x35, 0xc0, 0x03, 0xf7,
	0x7e, 0xab, 0x00, 0x2b, 0x1a, 0x3c, 0x85, 0x17, 0xb7, 0x81, 0x63, 0x33, 0x72, 0x1b, 0x91, 0xd0,
	0xf4, 0xa7, 0xf4, 0x70, 0x8a, 0x8f, 0xa0, 0xec, 0xd8, 0xcc, 0x96, 0x65, 0x38, 0x91, 0xa6, 0x19,
	0x9e, 0x78, 0x89, 0xef, 0xc1, 0x58, 0x33, 0x1c, 0x5e, 0xed, 0xff, 0xc4, 0xf1, 0x33, 0xd4, 0x53,
	0x4d, 0xce, 0x48, 0x3c, 0x33, 0xa5, 0xa8, 0x09, 0x35, 0x2f, 0x8e, 0xdc, 0x89, 0xe9, 0x34, 0x4b,
	0xc2, 0x27, 0x15, 0xf1, 0x10, 0x3e, 0x1c, 0xb3, 0x90, 0xd8, 0x5e, 0x9f, 0x3e, 0xfa, 0x4b, 0x6a,
	0x3b, 0xd7, 0xee, 0x92, 0xf4, 0x96, 0x74, 0xb2, 0xe0, 0xe5, 0x65, 0x94, 0xd9, 0xcb, 0x37, 0x34,
	0xf6, 0x99, 0xe4, 0x52, 0x34, 0x7c, 0xdb, 0xb2, 0xb8, 0x1b, 0x32, 0xcc, 0x15, 0x7c, 0x90, 0xc0,
	0xdd, 0x06, 0x9b, 0x60, 0x07, 0x77, 0x56, 0xa1, 0x2e, 0xe6, 0x52, 0x97, 0x14, 0xea, 0x3b, 0x38,
	0x19, 0x13, 0x3b, 0x9c, 0xcc, 0xaf, 0x43, 0x97, 0xf8, 0xff, 0x63, 0x9c, 0x9a, 0x50, 0x5b, 0x90,
	0xd5, 0x23, 0x0d, 0x1d, 0x59, 0xbf, 0x54, 0xc4, 0x77, 0x00, 0x09, 0xe8, 0x8d, 0x1b, 0xb1, 0xbd,
	0x75, 0x39, 0x87, 0x7a, 0x2c, 0x5b, 0xd5, 0x2c, 0xb6, 0x4b, 0xbb, 0x7a, 0x9a, 0x19, 0xe0, 0xbf,
	0x35, 0xa8, 0xbd, 0x8d, 0xa3, 0xf9, 0x30, 0x9a, 0xa1, 0x57, 0xa0, 0x33, 0xd7, 0x23, 0x11, 0xb3,
	0xbd, 0x40, 0xe2, 0xae, 0x15, 0xa8, 0x03, 0x65, 0xb6, 0x0a, 0x92, 0xde, 0x1e, 0x77, 0x5b, 0x12,
	0x52, 0xfa, 0xa6, 0xbf, 0x3f, 0xad, 0x02, 0x62, 0x09, 0x3b, 0x74, 0x0e, 0xba, 0xeb, 0x0d, 0xa3,
	0x59, 0x3f, 0x2d, 0x94, 0xd1, 0x3d, 0x92, 0x4e, 0xe6, 0x70, 0x18, 0xcd, 0x22, 0x6b, 0xfd, 0x1e,
	0x7d, 0x06, 0x47, 0x53, 0x91, 0x61, 0xea, 0x50, 0xde, 0x3d, 0x8c, 0x9b, 0x56, 0xf8, 0x1b, 0x30,
	0x14, 0x62, 0xa4, 0x43, 0xc5, 0x1c, 0x0e, 0xc7, 0x83, 0xd3, 0x02, 0x3a, 0x85, 0xc6, 0xe8, 0xea,
	0x97, 0x6b, 0xcb, 0xbc, 0x1a, 0xf5, 0xb9, 0x46, 0xe3, 0x1a, 0xeb, 0xea, 0xdd, 0x5a, 0x53, 0xc4,
	0x0b, 0x61, 0xbe, 0x37, 0xf1, 0x97, 0x50, 0x9d, 0x86, 0xd4, 0xcb, 0x56, 0x5c, 0x4a, 0x7c, 0x08,
	0x18, 0xcd, 0x26, 0x5a, 0x3c, 0xf3, 0x1e, 0x8a, 0x76, 0xfa, 0x4c, 0x64, 0xa0, 0x5b, 0xa9, 0x88,
	0x7f, 0x83, 0xc6, 0x98, 0xf8, 0x8e, 0x20, 0x3c, 0x7c, 0x36, 0x30, 0x54, 0x44, 0xb1, 0xe4, 0x92,
	0x36, 0xd4, 0x42, 0x5a, 0xc9, 0x2b, 0x7c, 0x03, 0xd5, 0xa4, 0xb0, 0x7b, 0x27, 0x44, 0x41, 0x2b,
	0xe5, 0xa0, 0x75, 0xff, 0x29, 0x42, 0x99, 0x97, 0x1d, 0x7d, 0x0a, 0xf5, 0xf4, 0x0b, 0x83, 0xd2,
	0x18, 0x95, 0xef, 0x57, 0xeb, 0xa9, 0x2e, 0xc2, 0x05, 0x74, 0x0e, 0x15, 0x71, 0xfe, 0x51, 0xda,
	0xc2, 0xf4, 0x83, 0xd2, 0xda, 0x52, 0x70, 0xe3, 0x2f, 0xc0, 0x18, 0x10, 0x96, 0xdd, 0x97, 0xf7,
	0xa4, 0x85, 0x7a, 0x9a, 0x33, 0x1a, 0xe5, 0xd2, 0xe1, 0x02, 0xea, 0x83, 0x3e, 0x20, 0xec, 0xf2,
	0x77, 0x9b, 0xd9, 0xe1, 0x6e, 0xbf, 0xd7, 0x52, 0x99, 0x73, 0x65, 0x70, 0xe1, 0x42, 0x43, 0x7d,
	0x38, 0xde, 0x3c, 0xd4, 0xa8, 0x99, 0xb2, 0x6d, 0xdf, 0xef, 0x56, 0xce, 0x35, 0xc5, 0x05, 0xf4,
	0x3d, 0x34, 0x12, 0x73, 0x19, 0xce, 0xab, 0x0d, 0xe6, 0xad, 0x83, 0x94, 0x8f, 0x73, 0xa6, 0x5d,
	0x68, 0xdd, 0xbf, 0x34, 0xa8, 0x26, 0x2b, 0x8f, 0xbe, 0x86, 0xa3, 0x01, 0x61, 0xca, 0xfe, 0xef,
	0x4c, 0xf3, 0x85, 0x54, 0xae, 0xed, 0x44, 0x66, 0xdf, 0xf2, 0xa9, 0x5b, 0x1f, 0x25, 0x94, 0xb2,
	0x6e, 0x5d, 0xaa, 0x3c, 0xf7, 0xaf, 0x40, 0xbf, 0x74, 0x1c, 0xe9, 0xbb, 0x93, 0x37, 0x37, 0x8d,
	0xee, 0x9f, 0x1a, 0x94, 0xf8, 0x72, 0x5d, 0x40, 0x95, 0xef, 0xa8, 0x32, 0x3d, 0xca, 0x84, 0xb7,
	0x8e, 0x37, 0xef, 0x48, 0xca, 0x9a, 0xad, 0x4a, 0xc6, 0xaa, 0x2e, 0xcf, 0x33, 0x4d, 0x30, 0xa1,
	0x3d, 0x20, 0x4c, 0x18, 0x7e, 0xe7, 0x46, 0x8c, 0x86, 0xab, 0x1e, 0x61, 0x8f, 0x84, 0xf8, 0x63,
	0xd7, 0x9f, 0x2d, 0x45, 0x27, 0x77, 0x27, 0xb2, 0xb1, 0x04, 0x3c, 0x8c, 0xfb, 0xaa, 0xf8, 0xbb,
	0xf7, 0xc9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x1d, 0x03, 0x1c, 0xfd, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	GetUserInfo(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (*UserInfoRes, error)
	GetAvatar(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (User_GetAvatarClient, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*OperationResult, error)
	UpdateAvatar(ctx context.Context, opts ...grpc.CallOption) (User_UpdateAvatarClient, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/popim.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/popim.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (*UserInfoRes, error) {
	out := new(UserInfoRes)
	err := c.cc.Invoke(ctx, "/popim.User/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAvatar(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (User_GetAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[0], "/popim.User/GetAvatar", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetAvatarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_GetAvatarClient interface {
	Recv() (*StreamDownloadFileBlock, error)
	grpc.ClientStream
}

type userGetAvatarClient struct {
	grpc.ClientStream
}

func (x *userGetAvatarClient) Recv() (*StreamDownloadFileBlock, error) {
	m := new(StreamDownloadFileBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/popim.User/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateAvatar(ctx context.Context, opts ...grpc.CallOption) (User_UpdateAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[1], "/popim.User/UpdateAvatar", opts...)
	if err != nil {
		return nil, err
	}
	x := &userUpdateAvatarClient{stream}
	return x, nil
}

type User_UpdateAvatarClient interface {
	Send(*StreamUploadFileBlock) error
	Recv() (*OperationResult, error)
	grpc.ClientStream
}

type userUpdateAvatarClient struct {
	grpc.ClientStream
}

func (x *userUpdateAvatarClient) Send(m *StreamUploadFileBlock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userUpdateAvatarClient) Recv() (*OperationResult, error) {
	m := new(OperationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
	Login(context.Context, *LoginReq) (*LoginRes, error)
	GetUserInfo(context.Context, *QueryByIdReq) (*UserInfoRes, error)
	GetAvatar(*QueryByIdReq, User_GetAvatarServer) error
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*OperationResult, error)
	UpdateAvatar(User_UpdateAvatarServer) error
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) Register(ctx context.Context, req *RegisterReq) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedUserServer) Login(ctx context.Context, req *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserServer) GetUserInfo(ctx context.Context, req *QueryByIdReq) (*UserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedUserServer) GetAvatar(req *QueryByIdReq, srv User_GetAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvatar not implemented")
}
func (*UnimplementedUserServer) UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (*UnimplementedUserServer) UpdateAvatar(srv User_UpdateAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/popim.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/popim.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/popim.User/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*QueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryByIdReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetAvatar(m, &userGetAvatarServer{stream})
}

type User_GetAvatarServer interface {
	Send(*StreamDownloadFileBlock) error
	grpc.ServerStream
}

type userGetAvatarServer struct {
	grpc.ServerStream
}

func (x *userGetAvatarServer) Send(m *StreamDownloadFileBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/popim.User/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).UpdateAvatar(&userUpdateAvatarServer{stream})
}

type User_UpdateAvatarServer interface {
	Send(*OperationResult) error
	Recv() (*StreamUploadFileBlock, error)
	grpc.ServerStream
}

type userUpdateAvatarServer struct {
	grpc.ServerStream
}

func (x *userUpdateAvatarServer) Send(m *OperationResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userUpdateAvatarServer) Recv() (*StreamUploadFileBlock, error) {
	m := new(StreamUploadFileBlock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "popim.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAvatar",
			Handler:       _User_GetAvatar_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateAvatar",
			Handler:       _User_UpdateAvatar_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "popim.proto",
}

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FriendClient interface {
	GetFriendList(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (Friend_GetFriendListClient, error)
	SearchFriend(ctx context.Context, in *SearchFriendReq, opts ...grpc.CallOption) (Friend_SearchFriendClient, error)
	AddFriend(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (*OperationResult, error)
}

type friendClient struct {
	cc *grpc.ClientConn
}

func NewFriendClient(cc *grpc.ClientConn) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) GetFriendList(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (Friend_GetFriendListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Friend_serviceDesc.Streams[0], "/popim.Friend/GetFriendList", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendGetFriendListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Friend_GetFriendListClient interface {
	Recv() (*FriendList, error)
	grpc.ClientStream
}

type friendGetFriendListClient struct {
	grpc.ClientStream
}

func (x *friendGetFriendListClient) Recv() (*FriendList, error) {
	m := new(FriendList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *friendClient) SearchFriend(ctx context.Context, in *SearchFriendReq, opts ...grpc.CallOption) (Friend_SearchFriendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Friend_serviceDesc.Streams[1], "/popim.Friend/SearchFriend", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendSearchFriendClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Friend_SearchFriendClient interface {
	Recv() (*FriendList, error)
	grpc.ClientStream
}

type friendSearchFriendClient struct {
	grpc.ClientStream
}

func (x *friendSearchFriendClient) Recv() (*FriendList, error) {
	m := new(FriendList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *friendClient) AddFriend(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/popim.Friend/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
type FriendServer interface {
	GetFriendList(*QueryByIdReq, Friend_GetFriendListServer) error
	SearchFriend(*SearchFriendReq, Friend_SearchFriendServer) error
	AddFriend(context.Context, *QueryByIdReq) (*OperationResult, error)
}

// UnimplementedFriendServer can be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (*UnimplementedFriendServer) GetFriendList(req *QueryByIdReq, srv Friend_GetFriendListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (*UnimplementedFriendServer) SearchFriend(req *SearchFriendReq, srv Friend_SearchFriendServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchFriend not implemented")
}
func (*UnimplementedFriendServer) AddFriend(ctx context.Context, req *QueryByIdReq) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}

func RegisterFriendServer(s *grpc.Server, srv FriendServer) {
	s.RegisterService(&_Friend_serviceDesc, srv)
}

func _Friend_GetFriendList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryByIdReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendServer).GetFriendList(m, &friendGetFriendListServer{stream})
}

type Friend_GetFriendListServer interface {
	Send(*FriendList) error
	grpc.ServerStream
}

type friendGetFriendListServer struct {
	grpc.ServerStream
}

func (x *friendGetFriendListServer) Send(m *FriendList) error {
	return x.ServerStream.SendMsg(m)
}

func _Friend_SearchFriend_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchFriendReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendServer).SearchFriend(m, &friendSearchFriendServer{stream})
}

type Friend_SearchFriendServer interface {
	Send(*FriendList) error
	grpc.ServerStream
}

type friendSearchFriendServer struct {
	grpc.ServerStream
}

func (x *friendSearchFriendServer) Send(m *FriendList) error {
	return x.ServerStream.SendMsg(m)
}

func _Friend_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/popim.Friend/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddFriend(ctx, req.(*QueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Friend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "popim.Friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _Friend_AddFriend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFriendList",
			Handler:       _Friend_GetFriendList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchFriend",
			Handler:       _Friend_SearchFriend_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "popim.proto",
}

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Pusher(ctx context.Context, in *AuthContext, opts ...grpc.CallOption) (Msg_PusherClient, error)
	SendIMMsg(ctx context.Context, in *SendIMMsgReq, opts ...grpc.CallOption) (*OperationResult, error)
	GetIMMsgHistoryBetweenSingleUser(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (Msg_GetIMMsgHistoryBetweenSingleUserClient, error)
}

type msgClient struct {
	cc *grpc.ClientConn
}

func NewMsgClient(cc *grpc.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Pusher(ctx context.Context, in *AuthContext, opts ...grpc.CallOption) (Msg_PusherClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Msg_serviceDesc.Streams[0], "/popim.Msg/Pusher", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgPusherClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Msg_PusherClient interface {
	Recv() (*PushMsg, error)
	grpc.ClientStream
}

type msgPusherClient struct {
	grpc.ClientStream
}

func (x *msgPusherClient) Recv() (*PushMsg, error) {
	m := new(PushMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *msgClient) SendIMMsg(ctx context.Context, in *SendIMMsgReq, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/popim.Msg/SendIMMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GetIMMsgHistoryBetweenSingleUser(ctx context.Context, in *QueryByIdReq, opts ...grpc.CallOption) (Msg_GetIMMsgHistoryBetweenSingleUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Msg_serviceDesc.Streams[1], "/popim.Msg/GetIMMsgHistoryBetweenSingleUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgGetIMMsgHistoryBetweenSingleUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Msg_GetIMMsgHistoryBetweenSingleUserClient interface {
	Recv() (*IMMsg, error)
	grpc.ClientStream
}

type msgGetIMMsgHistoryBetweenSingleUserClient struct {
	grpc.ClientStream
}

func (x *msgGetIMMsgHistoryBetweenSingleUserClient) Recv() (*IMMsg, error) {
	m := new(IMMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Pusher(*AuthContext, Msg_PusherServer) error
	SendIMMsg(context.Context, *SendIMMsgReq) (*OperationResult, error)
	GetIMMsgHistoryBetweenSingleUser(*QueryByIdReq, Msg_GetIMMsgHistoryBetweenSingleUserServer) error
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Pusher(req *AuthContext, srv Msg_PusherServer) error {
	return status.Errorf(codes.Unimplemented, "method Pusher not implemented")
}
func (*UnimplementedMsgServer) SendIMMsg(ctx context.Context, req *SendIMMsgReq) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIMMsg not implemented")
}
func (*UnimplementedMsgServer) GetIMMsgHistoryBetweenSingleUser(req *QueryByIdReq, srv Msg_GetIMMsgHistoryBetweenSingleUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIMMsgHistoryBetweenSingleUser not implemented")
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Pusher_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuthContext)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MsgServer).Pusher(m, &msgPusherServer{stream})
}

type Msg_PusherServer interface {
	Send(*PushMsg) error
	grpc.ServerStream
}

type msgPusherServer struct {
	grpc.ServerStream
}

func (x *msgPusherServer) Send(m *PushMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Msg_SendIMMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendIMMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendIMMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/popim.Msg/SendIMMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendIMMsg(ctx, req.(*SendIMMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GetIMMsgHistoryBetweenSingleUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryByIdReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MsgServer).GetIMMsgHistoryBetweenSingleUser(m, &msgGetIMMsgHistoryBetweenSingleUserServer{stream})
}

type Msg_GetIMMsgHistoryBetweenSingleUserServer interface {
	Send(*IMMsg) error
	grpc.ServerStream
}

type msgGetIMMsgHistoryBetweenSingleUserServer struct {
	grpc.ServerStream
}

func (x *msgGetIMMsgHistoryBetweenSingleUserServer) Send(m *IMMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "popim.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendIMMsg",
			Handler:    _Msg_SendIMMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pusher",
			Handler:       _Msg_Pusher_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIMMsgHistoryBetweenSingleUser",
			Handler:       _Msg_GetIMMsgHistoryBetweenSingleUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "popim.proto",
}
